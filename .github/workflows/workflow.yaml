name: Pawsandclaws-ci-fullstack-workflow
on:
  push:
    branches:
      - eks-terraform-githuactions

jobs:
  build-backend:    
    name: Build Backend App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip' # caching pip dependencies

      - name: Install the dependencies and hadolint
        run: |
           python -m venv ~/.venv
           source ~/.venv/bin/activate
           python -m pip install --upgrade pip
           pip install -r backend/requirements.txt
           sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && sudo chmod +x /usr/local/bin/hadolint
      
      # - name: Lint with Ruff
      #   run: |
      #      pip install ruff
      #      cd backend 
      #      ruff check --output-format=github .
      #   continue-on-error: true

      - name: Run lint
        run: |
            source ~/.venv/bin/activate
            make lint
        continue-on-error: true
      
      - name: Build the backend image
        run: |
          docker build -f backend/Dockerfile.backend -t ${{ vars.DOCKER_HUB_USER }}/${{ vars.IMAGE_NAME }}-backend-app:1.0.0 .

      - name: Push docker image to Dockerhub
        run: | 
          docker login -u ${{ vars.DOCKER_HUB_USER }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ vars.DOCKER_HUB_USER }}/${{ vars.IMAGE_NAME }}-backend-app:1.0.0

  build-frontend:    
    name: Build Frontend App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-

      - name: Install the dependencies.
        run: |
          cd frontend && npm ci
          sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && sudo chmod +x /usr/local/bin/hadolint


      - name: Run lint
        run: |
          cd frontend && make lint
          npm run lint
        continue-on-error: true
      
      - name: Build the frontend image
        run: |
          docker build -f frontend/Dockerfile.frontend -t ${{ vars.DOCKER_HUB_USER }}/${{ vars.IMAGE_NAME }}-frontend-app:1.0.0 .

      - name: Push docker image to Dockerhub
        run: | 
          docker login -u ${{ vars.DOCKER_HUB_USER }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ vars.DOCKER_HUB_USER }}/${{ vars.IMAGE_NAME }}-frontend-app:1.0.0
  
  terraform-EKS-infra-setup:
    name: Create EKS Cluster using Terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.5

    - name: Terraform Init
      run: cd terraform && terraform init

    - name: Terraform Validate
      run: cd terraform && terraform validate 

    - name: Terraform Plan
      run: cd terraform && terraform plan 
      continue-on-error: true

    - name: Terraform Apply
      run: cd terraform && terraform apply -auto-approve
    
    - name: Get Cluster Name
      id: get_cluster_name
      run: echo "::set-output name=eks_cluster_name::$(terraform output -raw eks_cluster_name)"

  deploy:
    name: Setup Kubeconfig
    runs-on: ubuntu-latest
    needs: terraform-EKS-infra-setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.0

      - name: Generate Kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ vars.AWS_REGION }} \
            --name ${{ needs.terraform.outputs.eks_cluster_name }}
      
      - name: Deploy Postgres
        run: |
          kubectl apply -f .github/files/deploy/postgres-deployment.yml
      
      - name: Deploy Backend App
        run: |
          kubectl apply -f .github/files/deploy/backend-app-deployment.yml
          kubectl apply -f .github/files/deploy/backend-app-service.yml
          kubectl apply -f .github/files/deploy/templates-config.yml
      
      - name: Deploy Frontend App 
        run: |
          kubectl apply -f .github/files/deploy/frontend-app-deployment.yml
          kubectl apply -f .github/files/deploy/frontend-app-service.yml
          kubectl apply -f .github/files/deploy/nginx-configmap.yml


