version: 2.1

jobs:
  create-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum update -y
            yum install -y tar gzip
            yum install -y jq
      - run:
          name: Create EKS cluster
          no_output_timeout: 59m
          command: |
             set +e
              aws cloudformation deploy \
                --template-file .circleci/files/ekscluster.yml \
                --stack-name "pawsandclaws-${CIRCLE_WORKFLOW_ID:0:7}" \
                --capabilities CAPABILITY_NAMED_IAM \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                                    ClusterName=$EKS_CLUSTER_NAME \
                                    VpcId=vpc-0f7182917b3f1efa8 \
                                    SubnetIds="subnet-002e1d458df73dd3f,subnet-03d578a6c925dc1f2" \
                                    KeyName=$EKS_WORKER_NODE_KP \
                                    NodeGroupName=$EKS_NODE_GRP_NAME \
                                    NodeInstanceType=t2.micro \
                                    DesiredCapacity=2 \
                --tags project=pawsandclaws
             DEPLOY_EXIT_CODE=$?
             if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
              aws cloudformation describe-stack-events --stack-name "pawsandclaws-${CIRCLE_WORKFLOW_ID:0:7}" >> /tmp/output.txt
              cat /tmp/backend-output.txt
              exit 1
             fi
             set -e
  build-and-push:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "backend/requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Install pip packages
          command: |
            python3 -m venv ~/.venv
            source ~/.venv/bin/activate
            pip install -r backend/requirements.txt
            sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && sudo chmod +x /usr/local/bin/hadolint
      #run lint!
      - run:
          name: run lint
          command: |
            source ~/.venv/bin/activate
            make lint 
      - run:
          name: Build and push backend app docker image to Docker Hub
          command: |
            docker build -f backend/Dockerfile.backend -t tomlui2010/$IMAGE_NAME-backend-app:latest .
            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER_ID" --password-stdin
            docker push tomlui2010/$IMAGE_NAME-backend-app:latest

      - run:
          name: Build and push frontend app docker image to Docker Hub
          command: |
            docker build -f frontend/Dockerfile.frontend -t tomlui2010/$IMAGE_NAME-frontend-app:latest .
            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER_ID" --password-stdin
            docker push tomlui2010/$IMAGE_NAME-frontend-app:latest
      - save_cache:
          paths: 
            - ~/.venv
          key: v1-dependencies-{{ checksum "backend/requirements.txt" }}

  deploy:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Database
          command: |
            kubectl apply -f .circleci/files/deploy/postgres-deployment.yml
      - run:
          name: Deploy Flask backend to EKS
          command: |
            kubectl apply -f .circleci/files/deploy/backend-app-deployment.yml
            kubectl apply -f .circleci/files/deploy/backend-app-service.yml
            kubectl apply -f .circleci/files/deploy/templates-config.yml
      - run:
          name: Deploy React frontend to EKS
          command: |
            kubectl apply -f .circleci/files/deploy/frontend-app-deployment.yml
            kubectl apply -f .circleci/files/deploy/frontend-app-service.yml
            kubectl apply -f .circleci/files/deploy/nginx-configmap.yml

workflows:
  deployment:
    jobs:
      - create-cluster:
          context:
            - ppp
      - build-and-push:
          context:
           - ppp
      - deploy:
          requires:
            - build-and-push
            - create-cluster
          context:
           - ppp