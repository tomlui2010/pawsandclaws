AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an AWS EKS cluster

Parameters:
  ClusterName:
    Type: String
    Description: Name of the EKS cluster
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the Amazon VPC for the cluster
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs in the VPC
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 key pair to associate with the worker nodes
  NodeGroupName:
    Type: String
    Description: Name of the EKS node group
  NodeInstanceType:
    Type: String
    Description: EC2 instance type for the worker nodes
    Default: t3.medium
  DesiredCapacity:
    Type: Number
    Description: Desired number of worker nodes
    Default: 2
    MinValue: 1
    MaxValue: 10

Resources:
  VpcConfig:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: arn:aws:iam::674760044166:role/EKSClusterCreateRole
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
        SubnetIds: !Ref SubnetIds

  # EKSClusterRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${ClusterName}-role
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: eks.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSClusterUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub "${ClusterName}-eks-user"
      Policies:
        - PolicyName: EKSClusterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - eks:*
                  - ec2:Describe*
                  - ec2:CreateSecurityGroup
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:DeleteSecurityGroup
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:AttachNetworkInterface
                  - ec2:DetachNetworkInterface
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - iam:CreateServiceLinkedRole
                  - iam:GetRole
                  - iam:PassRole
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:TerminateInstanceInAutoScalingGroup
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                Resource: "*"
                
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the EKS cluster
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: VpcConfig
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Ref NodeGroupName
      NodeRole: arn:aws:iam::674760044166:role/EKSNodeGroupRole
      Subnets: !Ref SubnetIds
      ScalingConfig:
        DesiredSize: !Ref DesiredCapacity
        MinSize: 1
        MaxSize: 10
      InstanceTypes:
        - !Ref NodeInstanceType


Outputs:
  ClusterNameOutput:
    Description: Name of the EKS cluster
    Value: !Ref ClusterName
  NodeGroupNameOutput:
    Description: Name of the EKS node group
    Value: !Ref NodeGroupName
  EKSClusterUserOutput:
    Description: IAM User with permissions to manage EKS cluster
    Value: !Ref EKSClusterUser